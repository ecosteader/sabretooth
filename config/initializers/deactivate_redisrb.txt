# frozen_string_literal: true

require_relative '../../lib/mastodon/sidekiq_middleware'

Sidekiq.configure_server do |config|
  config.redis = REDIS_SIDEKIQ_PARAMS

  config.server_middleware do |chain|
    chain.add Mastodon::SidekiqMiddleware
  end

  config.server_middleware do |chain|
    chain.add SidekiqUniqueJobs::Middleware::Server
  end

  config.client_middleware do |chain|
    chain.add SidekiqUniqueJobs::Middleware::Client
  end

  SidekiqUniqueJobs::Server.configure(config)
end

Sidekiq.configure_client do |config|
  config.redis = REDIS_SIDEKIQ_PARAMS

  config.client_middleware do |chain|
    chain.add SidekiqUniqueJobs::Middleware::Client
  end
end

Sidekiq.logger.level = ::Logger.const_get(ENV.fetch('RAILS_LOG_LEVEL', 'info').upcase.to_s)

SidekiqUniqueJobs.configure do |config|
  config.reaper          = :ruby
  config.reaper_count    = 1000
  config.reaper_interval = 600
  config.reaper_timeout  = 150
  config.lock_ttl        = 50.days.to_i
end



# frozen_string_literal: true

#redis_connection = Redis.new(
#  url: ENV['REDIS_URL'],
#)

#namespace = ENV.fetch('REDIS_NAMESPACE') { nil }

#if namespace
#  Redis.current = Redis::Namespace.new(namespace, redis: redis_connection)
#else
#  Redis.current = redis_connection
#end

#redis = { db: 4, url: 'redis://localhost:6379/0' }

#Sidekiq.configure_client do |config|
#  config.redis = redis
#end

#Sidekiq.configure_server do |config|
#  config.redis = redis
#end

#ss = begin
#    Sidekiq::ScheduledSet.new
#  rescue
#    sleep 0.5
#    Sidekiq::ScheduledSet.new
#end
